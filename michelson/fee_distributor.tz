parameter (or (or (pair %add_amm (address %amm) (set %tokens (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))))) (pair %add_fees (nat %epoch) (map %fees (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat))) (or (pair %claim (nat %token_id) (pair (address %owner) (pair (address %amm) (list %epoch_vote_shares (pair (nat %epoch) (nat %share)))))) (or (unit %default) (address %remove_amm))));
storage   (pair (pair (big_map %amm_epoch_fee (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map %amm_to_tokens address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%add_amm
            # == add_amm ==
            # sp.verify(sp.sender == self.data.core_factory, 'NOT_AUTHORISED') # @storage : @parameter%add_amm
            DUP;        # @storage : @storage : @parameter%add_amm
            DUG 2;      # @storage : @parameter%add_amm : @storage
            GET 5;      # address : @parameter%add_amm : @storage
            SENDER;     # @sender : address : @parameter%add_amm : @storage
            COMPARE;    # int : @parameter%add_amm : @storage
            EQ;         # bool : @parameter%add_amm : @storage
            IF
              {}
              {
                PUSH string "NOT_AUTHORISED"; # string : @parameter%add_amm : @storage
                FAILWITH;   # FAILED
              }; # @parameter%add_amm : @storage
            SWAP;       # @storage : @parameter%add_amm
            # self.data.amm_to_tokens[params.amm] = params.tokens # @storage : @parameter%add_amm
            UNPAIR;     # pair (big_map %amm_epoch_fee (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map %amm_to_tokens address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_amm
            UNPAIR;     # big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_amm
            SWAP;       # big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_amm
            DUP 4;      # @parameter%add_amm : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_amm
            CDR;        # set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_amm
            SOME;       # option (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_amm
            DIG 4;      # @parameter%add_amm : option (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))
            CAR;        # address : option (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))
            UPDATE;     # big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))
            SWAP;       # big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))
            PAIR;       # pair (big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))
            PAIR;       # pair (pair (big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
          }
          {
            SWAP;       # @storage : @parameter%add_fees
            # == add_fees ==
            # sp.verify(self.data.amm_to_tokens.contains(sp.sender), 'AMM_INVALID_OR_NOT_WHITELISTED') # @storage : @parameter%add_fees
            DUP;        # @storage : @storage : @parameter%add_fees
            DUG 2;      # @storage : @parameter%add_fees : @storage
            CAR;        # pair (big_map %amm_epoch_fee (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map %amm_to_tokens address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))))) : @parameter%add_fees : @storage
            CDR;        # big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : @parameter%add_fees : @storage
            SENDER;     # @sender : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : @parameter%add_fees : @storage
            MEM;        # bool : @parameter%add_fees : @storage
            IF
              {}
              {
                PUSH string "AMM_INVALID_OR_NOT_WHITELISTED"; # string : @parameter%add_fees : @storage
                FAILWITH;   # FAILED
              }; # @parameter%add_fees : @storage
            SWAP;       # @storage : @parameter%add_fees
            # sp.verify(~ (self.data.amm_epoch_fee.contains(sp.record(amm = sp.sender, epoch = params.epoch))), 'ALREADY_ADDED_FEES_FOR_EPOCH') # @storage : @parameter%add_fees
            DUP;        # @storage : @storage : @parameter%add_fees
            DUG 2;      # @storage : @parameter%add_fees : @storage
            CAR;        # pair (big_map %amm_epoch_fee (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map %amm_to_tokens address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))))) : @parameter%add_fees : @storage
            CAR;        # big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : @parameter%add_fees : @storage
            SWAP;       # @parameter%add_fees : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : @storage
            DUP;        # @parameter%add_fees : @parameter%add_fees : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : @storage
            DUG 2;      # @parameter%add_fees : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : @parameter%add_fees : @storage
            CAR;        # nat : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : @parameter%add_fees : @storage
            SENDER;     # @sender : nat : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : @parameter%add_fees : @storage
            PAIR;       # pair @sender nat : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : @parameter%add_fees : @storage
            MEM;        # bool : @parameter%add_fees : @storage
            IF
              {
                PUSH string "ALREADY_ADDED_FEES_FOR_EPOCH"; # string : @parameter%add_fees : @storage
                FAILWITH;   # FAILED
              }
              {}; # @parameter%add_fees : @storage
            SWAP;       # @storage : @parameter%add_fees
            # self.data.amm_epoch_fee[sp.record(amm = sp.sender, epoch = params.epoch)] = {} # @storage : @parameter%add_fees
            UNPAIR;     # pair (big_map %amm_epoch_fee (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map %amm_to_tokens address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
            UNPAIR;     # big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
            PUSH (option (map (or address (or (pair address nat) unit)) nat)) (Some {}); # option (map (or address (or (pair address nat) unit)) nat) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
            DUP 5;      # @parameter%add_fees : option (map (or address (or (pair address nat) unit)) nat) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
            CAR;        # nat : option (map (or address (or (pair address nat) unit)) nat) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
            SENDER;     # @sender : nat : option (map (or address (or (pair address nat) unit)) nat) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
            PAIR;       # pair @sender nat : option (map (or address (or (pair address nat) unit)) nat) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
            UPDATE;     # big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
            PAIR;       # pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
            PAIR;       # pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))) : @parameter%add_fees
            SWAP;       # @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
            # for token in params.fees.keys(): ... # @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
            DUP;        # @parameter%add_fees : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
            CDR;        # map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
            ITER
              {
                CAR;        # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                # sp.verify(self.data.amm_to_tokens[sp.sender].contains(token), 'INVALID_TOKEN') # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                DUP 3;      # pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                CAR;        # pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))))) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                CDR;        # big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                SENDER;     # @sender : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                GET;        # option (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                IF_NONE
                  {
                    PUSH int 150; # int : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                SWAP;       # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                DUP;        # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                DUG 2;      # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                MEM;        # bool : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                IF
                  {}
                  {
                    PUSH string "INVALID_TOKEN"; # string : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                    FAILWITH;   # FAILED
                  }; # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                # self.data.amm_epoch_fee[sp.record(amm = sp.sender, epoch = params.epoch)][token] = params.fees[token] # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
                DIG 2;      # pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                UNPAIR;     # pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                UNPAIR;     # big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                DUP;        # big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                DUP 6;      # @parameter%add_fees : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                CAR;        # nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                SENDER;     # @sender : nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                PAIR;       # pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                DUP;        # pair @sender nat : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                DUG 2;      # pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                GET;        # option (map (or address (or (pair address nat) unit)) nat) : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                IF_NONE
                  {
                    PUSH int 151; # int : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                DUP 7;      # @parameter%add_fees : @some : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                CDR;        # map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat : @some : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                DUP 7;      # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat : @some : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                GET;        # option nat : @some : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                IF_NONE
                  {
                    PUSH int 151; # int : @some : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @some : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                SOME;       # option nat : @some : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @parameter%add_fees
                DIG 6;      # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : option nat : @some : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
                UPDATE;     # map (or address (or (pair address nat) unit)) nat : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
                SOME;       # option (map (or address (or (pair address nat) unit)) nat) : pair @sender nat : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
                SWAP;       # pair @sender nat : option (map (or address (or (pair address nat) unit)) nat) : big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
                UPDATE;     # big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
                PAIR;       # pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%add_fees
                PAIR;       # pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))) : @parameter%add_fees
                SWAP;       # @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
              }; # @parameter%add_fees : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
            DROP;       # pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
          }; # pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
        NIL operation; # list operation : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
      }
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%claim
            # == claim ==
            # sp.verify(sp.sender == self.data.voter, 'NOT_AUTHORISED') # @storage : @parameter%claim
            DUP;        # @storage : @storage : @parameter%claim
            DUG 2;      # @storage : @parameter%claim : @storage
            GET 6;      # address : @parameter%claim : @storage
            SENDER;     # @sender : address : @parameter%claim : @storage
            COMPARE;    # int : @parameter%claim : @storage
            EQ;         # bool : @parameter%claim : @storage
            IF
              {}
              {
                PUSH string "NOT_AUTHORISED"; # string : @parameter%claim : @storage
                FAILWITH;   # FAILED
              }; # @parameter%claim : @storage
            # token_fees = sp.local("token_fees", {}, sp.TMap(sp.TVariant(fa12 = sp.TAddress, fa2 = sp.TPair(sp.TAddress, sp.TNat), tez = sp.TUnit).layout(("fa12", ("fa2", "tez"))), sp.TNat)) # @parameter%claim : @storage
            EMPTY_MAP (or address (or (pair address nat) unit)) nat; # map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
            SWAP;       # @parameter%claim : map (or address (or (pair address nat) unit)) nat : @storage
            # for epoch_vote_share in params.epoch_vote_shares: ... # @parameter%claim : map (or address (or (pair address nat) unit)) nat : @storage
            DUP;        # @parameter%claim : @parameter%claim : map (or address (or (pair address nat) unit)) nat : @storage
            DUG 2;      # @parameter%claim : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
            GET 6;      # list (pair (nat %epoch) (nat %share)) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
            ITER
              {
                # sp.verify(self.data.amm_epoch_fee.contains(sp.record(amm = params.amm, epoch = epoch_vote_share.epoch)), 'FEES_NOT_YET_ADDED') # pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUP 4;      # @storage : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                CAR;        # pair (big_map %amm_epoch_fee (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map %amm_to_tokens address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))))) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                CAR;        # big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                SWAP;       # pair (nat %epoch) (nat %share) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUP;        # pair (nat %epoch) (nat %share) : pair (nat %epoch) (nat %share) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUG 2;      # pair (nat %epoch) (nat %share) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                CAR;        # nat : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUP 5;      # @parameter%claim : nat : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                GET 5;      # address : nat : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                PAIR;       # pair address nat : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                MEM;        # bool : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                IF
                  {}
                  {
                    PUSH string "FEES_NOT_YET_ADDED"; # string : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }; # pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                # sp.verify(~ (self.data.claim_ledger.contains(sp.record(token_id = params.token_id, amm = params.amm, epoch = epoch_vote_share.epoch))), 'VOTER_ALREADY_CLAIMED_FEES_FOR_EPOCH') # pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUP 4;      # @storage : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                GET 3;      # big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                SWAP;       # pair (nat %epoch) (nat %share) : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUP;        # pair (nat %epoch) (nat %share) : pair (nat %epoch) (nat %share) : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUG 2;      # pair (nat %epoch) (nat %share) : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                CAR;        # nat : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DIG 4;      # @parameter%claim : nat : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @storage
                DUP;        # @parameter%claim : @parameter%claim : nat : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @storage
                GET 5;      # address : @parameter%claim : nat : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @storage
                SWAP;       # @parameter%claim : address : nat : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @storage
                DUP;        # @parameter%claim : @parameter%claim : address : nat : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @storage
                DUG 6;      # @parameter%claim : address : nat : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                CAR;        # nat : address : nat : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                PAIR 3;     # pair nat (pair address nat) : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                MEM;        # bool : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                IF
                  {
                    PUSH string "VOTER_ALREADY_CLAIMED_FEES_FOR_EPOCH"; # string : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                # compute_fee_distributor_179 = sp.local("compute_fee_distributor_179", self.data.amm_epoch_fee[sp.record(amm = params.amm, epoch = epoch_vote_share.epoch)]) # pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUP 4;      # @storage : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                CAR;        # pair (big_map %amm_epoch_fee (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map %amm_to_tokens address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))))) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                CAR;        # big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                SWAP;       # pair (nat %epoch) (nat %share) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUP;        # pair (nat %epoch) (nat %share) : pair (nat %epoch) (nat %share) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUG 2;      # pair (nat %epoch) (nat %share) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                CAR;        # nat : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUP 5;      # @parameter%claim : nat : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                GET 5;      # address : nat : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                PAIR;       # pair address nat : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                GET;        # option (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                IF_NONE
                  {
                    PUSH int 179; # int : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                # for token in compute_fee_distributor_179.value.keys(): ... # @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUP;        # @some : @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                ITER
                  {
                    CAR;        # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    # token_fees.value[token] = token_fees.value.get(token, default_value = 0) + (compute_fee_distributor_179.value[token] * epoch_vote_share.share) # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    DUP 4;      # map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    DUP 4;      # pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    CDR;        # nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    DUP 4;      # @some : nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    DUP 4;      # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    GET;        # option nat : nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    IF_NONE
                      {
                        PUSH int 181; # int : nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    MUL;        # nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    DIG 5;      # map (or address (or (pair address nat) unit)) nat : nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : @parameter%claim : @storage
                    DUP 4;      # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : map (or address (or (pair address nat) unit)) nat : nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : @parameter%claim : @storage
                    GET;        # option nat : nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : @parameter%claim : @storage
                    IF_NONE
                      {
                        PUSH nat 0; # nat : nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : @parameter%claim : @storage
                      }
                      {}; # nat : nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : @parameter%claim : @storage
                    ADD;        # nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : @parameter%claim : @storage
                    SOME;       # option nat : map (or address (or (pair address nat) unit)) nat : or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : pair (nat %epoch) (nat %share) : @parameter%claim : @storage
                    DIG 2;      # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : option nat : map (or address (or (pair address nat) unit)) nat : @some : pair (nat %epoch) (nat %share) : @parameter%claim : @storage
                    UPDATE;     # map (or address (or (pair address nat) unit)) nat : @some : pair (nat %epoch) (nat %share) : @parameter%claim : @storage
                    DUG 2;      # @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                  }; # @some : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DROP;       # pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                # self.data.claim_ledger[sp.record(token_id = params.token_id, amm = params.amm, epoch = epoch_vote_share.epoch)] = sp.unit # pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DIG 3;      # @storage : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim
                DUP;        # @storage : @storage : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim
                GET 3;      # big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : @storage : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim
                PUSH (option unit) (Some Unit); # option unit : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : @storage : pair (nat %epoch) (nat %share) : map (or address (or (pair address nat) unit)) nat : @parameter%claim
                DIG 3;      # pair (nat %epoch) (nat %share) : option unit : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : @storage : map (or address (or (pair address nat) unit)) nat : @parameter%claim
                CAR;        # nat : option unit : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : @storage : map (or address (or (pair address nat) unit)) nat : @parameter%claim
                DIG 5;      # @parameter%claim : nat : option unit : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : @storage : map (or address (or (pair address nat) unit)) nat
                DUP;        # @parameter%claim : @parameter%claim : nat : option unit : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : @storage : map (or address (or (pair address nat) unit)) nat
                GET 5;      # address : @parameter%claim : nat : option unit : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : @storage : map (or address (or (pair address nat) unit)) nat
                SWAP;       # @parameter%claim : address : nat : option unit : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : @storage : map (or address (or (pair address nat) unit)) nat
                DUP;        # @parameter%claim : @parameter%claim : address : nat : option unit : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : @storage : map (or address (or (pair address nat) unit)) nat
                DUG 7;      # @parameter%claim : address : nat : option unit : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : @storage : map (or address (or (pair address nat) unit)) nat : @parameter%claim
                CAR;        # nat : address : nat : option unit : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : @storage : map (or address (or (pair address nat) unit)) nat : @parameter%claim
                PAIR 3;     # pair nat (pair address nat) : option unit : big_map (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit : @storage : map (or address (or (pair address nat) unit)) nat : @parameter%claim
                UPDATE;     # big_map (pair nat (pair address nat)) unit : @storage : map (or address (or (pair address nat) unit)) nat : @parameter%claim
                UPDATE 3;   # @storage : map (or address (or (pair address nat) unit)) nat : @parameter%claim
                DUG 2;      # map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
              }; # map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
            # for token in token_fees.value.keys(): ... # map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
            DUP;        # map (or address (or (pair address nat) unit)) nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
            NIL operation; # list operation : map (or address (or (pair address nat) unit)) nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
            SWAP;       # map (or address (or (pair address nat) unit)) nat : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
            ITER
              {
                CAR;        # or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                # compute_fee_distributor_196 = sp.local("compute_fee_distributor_196", token_fees.value[token] // 1000000000000000000) # or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                PUSH nat 1000000000000000000; # nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUP 4;      # map (or address (or (pair address nat) unit)) nat : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUP 3;      # or address (or (pair address nat) unit) : map (or address (or (pair address nat) unit)) nat : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                GET;        # option nat : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                IF_NONE
                  {
                    PUSH int 196; # int : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                EDIV;       # option (pair nat nat) : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                IF_NONE
                  {
                    PUSH int 196; # int : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    CAR;        # nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                  }; # nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                SWAP;       # or address (or (pair address nat) unit) : nat : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                # with token.match_cases(...): # or address (or (pair address nat) unit) : nat : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUP;        # or address (or (pair address nat) unit) : or address (or (pair address nat) unit) : nat : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                DUG 2;      # or address (or (pair address nat) unit) : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                IF_LEFT
                  {
                    # if compute_fee_distributor_196.value > 0: # address : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    PUSH nat 0; # nat : address : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    DUP 3;      # nat : nat : address : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    COMPARE;    # int : address : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    GT;         # bool : address : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                    IF
                      {
                        DIG 2;      # or address (or (pair address nat) unit) : address : nat : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        DROP;       # address : nat : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.owner, value = compute_fee_distributor_196.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), fa12, entry_point='transfer').open_some()) # address : nat : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        DIG 2;      # list operation : address : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        SWAP;       # address : list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        IF_NONE
                          {
                            PUSH int 16; # int : list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        PUSH mutez 0; # mutez : @some : list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        DIG 3;      # nat : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        DUP 6;      # @parameter%claim : nat : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        GET 3;      # address : nat : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        TRANSFER_TOKENS; # operation : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        CONS;       # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                      }
                      {
                        DROP 3;     # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                      }; # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                  }
                  {
                    IF_LEFT
                      {
                        # if compute_fee_distributor_196.value > 0: # pair address nat : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        PUSH nat 0; # nat : pair address nat : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        DUP 3;      # nat : nat : pair address nat : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        COMPARE;    # int : pair address nat : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        GT;         # bool : pair address nat : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        IF
                          {
                            DIG 2;      # or address (or (pair address nat) unit) : pair address nat : nat : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            DROP;       # pair address nat : nat : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.owner, token_id = sp.snd(fa2), amount = compute_fee_distributor_196.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), sp.fst(fa2), entry_point='transfer').open_some()) # pair address nat : nat : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            DIG 2;      # list operation : pair address nat : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            SWAP;       # pair address nat : list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            DUP;        # pair address nat : pair address nat : list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            DUG 2;      # pair address nat : list operation : pair address nat : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            CAR;        # address : list operation : pair address nat : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : pair address nat : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            IF_NONE
                              {
                                PUSH int 55; # int : list operation : pair address nat : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair address nat : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            PUSH mutez 0; # mutez : @some : list operation : pair address nat : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            DIG 6;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            DIG 6;      # pair address nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            CDR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            DUP 9;      # @parameter%claim : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            GET 3;      # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            TRANSFER_TOKENS; # operation : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            CONS;       # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                          }
                          {
                            DROP 3;     # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                          }; # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                      }
                      {
                        DROP;       # nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        # if compute_fee_distributor_196.value > 0: # nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        DUP;        # nat : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        PUSH nat 0; # nat : nat : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        COMPARE;    # int : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        LT;         # bool : nat : or address (or (pair address nat) unit) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                        IF
                          {
                            SWAP;       # or address (or (pair address nat) unit) : nat : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            DROP;       # nat : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            SWAP;       # list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            # sp.send(params.owner, sp.mul(compute_fee_distributor_196.value, sp.mutez(1))) # list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            DUP 4;      # @parameter%claim : list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            GET 3;      # address : list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            CONTRACT unit; # option (contract unit) : list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            IF_NONE
                              {
                                PUSH int 220; # int : list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            PUSH mutez 1; # mutez : @some : list operation : nat : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            DIG 3;      # nat : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            MUL;        # mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            UNIT;       # unit : mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            TRANSFER_TOKENS; # operation : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                            CONS;       # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                          }
                          {
                            DROP 2;     # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                          }; # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                      }; # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
                  }; # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
              }; # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%claim : @storage
            SWAP;       # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%claim : @storage
            DROP;       # list operation : @parameter%claim : @storage
            SWAP;       # @parameter%claim : list operation : @storage
            DROP;       # list operation : @storage
          }
          {
            IF_LEFT
              {
                DROP;       # @storage
                # == default == # @storage
              }
              {
                SWAP;       # @storage : @parameter%remove_amm
                # == remove_amm ==
                # sp.verify(sp.sender == self.data.core_factory, 'NOT_AUTHORISED') # @storage : @parameter%remove_amm
                DUP;        # @storage : @storage : @parameter%remove_amm
                DUG 2;      # @storage : @parameter%remove_amm : @storage
                GET 5;      # address : @parameter%remove_amm : @storage
                SENDER;     # @sender : address : @parameter%remove_amm : @storage
                COMPARE;    # int : @parameter%remove_amm : @storage
                EQ;         # bool : @parameter%remove_amm : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_AUTHORISED"; # string : @parameter%remove_amm : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%remove_amm : @storage
                SWAP;       # @storage : @parameter%remove_amm
                # del self.data.amm_to_tokens[params] # @storage : @parameter%remove_amm
                UNPAIR;     # pair (big_map %amm_epoch_fee (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map %amm_to_tokens address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%remove_amm
                UNPAIR;     # big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%remove_amm
                SWAP;       # big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%remove_amm
                NONE (set (or address (or (pair address nat) unit))); # option (set (or address (or (pair address nat) unit))) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)) : @parameter%remove_amm
                DIG 4;      # @parameter%remove_amm : option (set (or address (or (pair address nat) unit))) : big_map address (set (or (address %fa12) (or (pair %fa2 address nat) (unit %tez)))) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))
                UPDATE;     # big_map address (set (or address (or (pair address nat) unit))) : big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))
                SWAP;       # big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : big_map address (set (or address (or (pair address nat) unit))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))
                PAIR;       # pair (big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map address (set (or address (or (pair address nat) unit)))) : pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))
                PAIR;       # pair (pair (big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map address (set (or address (or (pair address nat) unit))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
              }; # pair (pair (big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map address (set (or address (or (pair address nat) unit))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
            NIL operation; # list operation : pair (pair (big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map address (set (or address (or (pair address nat) unit))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
          }; # list operation : pair (pair (big_map (pair (address %amm) (nat %epoch)) (map (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) (big_map address (set (or address (or (pair address nat) unit))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
      }; # list operation : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or address (or (pair address nat) unit))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
    NIL operation; # list operation : list operation : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or address (or (pair address nat) unit))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
    SWAP;       # list operation : list operation : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or address (or (pair address nat) unit))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
    ITER
      {
        CONS;       # list operation : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or address (or (pair address nat) unit))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
      }; # list operation : pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or address (or (pair address nat) unit))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter)))
    PAIR;       # pair (list operation) (pair (pair (big_map (pair address nat) (map (or address (or (pair address nat) unit)) nat)) (big_map address (set (or address (or (pair address nat) unit))))) (pair (big_map %claim_ledger (pair (nat %token_id) (pair (address %amm) (nat %epoch))) unit) (pair (address %core_factory) (address %voter))))
  };