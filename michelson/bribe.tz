parameter (or (pair %add_bribe (nat %epoch) (pair (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) (or (pair %claim (nat %token_id) (pair (address %owner) (pair (nat %epoch) (pair (nat %bribe_id) (nat %vote_share))))) (pair %return_bribe (nat %epoch) (nat %bribe_id))));
storage   (pair (pair (big_map %claim_ledger (pair (nat %token_id) (nat %bribe_id)) unit) (big_map %epoch_bribes (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))))) (pair (nat %uid) (address %voter)));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        SWAP;       # @storage : @parameter%add_bribe
        # == add_bribe ==
        # compute_bribe_112 = sp.local("compute_bribe_112", sp.view("get_current_epoch", self.data.voter, sp.unit, sp.TPair(sp.TNat, sp.TTimestamp)).open_some(message = 'INVALID_VIEW')) # @storage : @parameter%add_bribe
        DUP;        # @storage : @storage : @parameter%add_bribe
        DUG 2;      # @storage : @parameter%add_bribe : @storage
        GET 4;      # address : @parameter%add_bribe : @storage
        UNIT;       # unit : address : @parameter%add_bribe : @storage
        VIEW "get_current_epoch" (pair nat timestamp); # option (pair nat timestamp) : @parameter%add_bribe : @storage
        IF_NONE
          {
            PUSH string "INVALID_VIEW"; # string : @parameter%add_bribe : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @parameter%add_bribe : @storage
        # sp.verify((params.epoch > sp.fst(compute_bribe_112.value)) | ((params.epoch == sp.fst(compute_bribe_112.value)) & (sp.now < sp.snd(compute_bribe_112.value))), 'EPOCH_IN_THE_PAST') # @some : @parameter%add_bribe : @storage
        DUP;        # @some : @some : @parameter%add_bribe : @storage
        CAR;        # nat : @some : @parameter%add_bribe : @storage
        DUP 3;      # @parameter%add_bribe : nat : @some : @parameter%add_bribe : @storage
        CAR;        # nat : nat : @some : @parameter%add_bribe : @storage
        COMPARE;    # int : @some : @parameter%add_bribe : @storage
        GT;         # bool : @some : @parameter%add_bribe : @storage
        IF
          {
            PUSH bool True; # bool : @some : @parameter%add_bribe : @storage
          }
          {
            DUP;        # @some : @some : @parameter%add_bribe : @storage
            CAR;        # nat : @some : @parameter%add_bribe : @storage
            DUP 3;      # @parameter%add_bribe : nat : @some : @parameter%add_bribe : @storage
            CAR;        # nat : nat : @some : @parameter%add_bribe : @storage
            COMPARE;    # int : @some : @parameter%add_bribe : @storage
            EQ;         # bool : @some : @parameter%add_bribe : @storage
            IF
              {
                DUP;        # @some : @some : @parameter%add_bribe : @storage
                CDR;        # timestamp : @some : @parameter%add_bribe : @storage
                NOW;        # @now : timestamp : @some : @parameter%add_bribe : @storage
                COMPARE;    # int : @some : @parameter%add_bribe : @storage
                LT;         # bool : @some : @parameter%add_bribe : @storage
              }
              {
                PUSH bool False; # bool : @some : @parameter%add_bribe : @storage
              }; # bool : @some : @parameter%add_bribe : @storage
          }; # bool : @some : @parameter%add_bribe : @storage
        IF
          {}
          {
            PUSH string "EPOCH_IN_THE_PAST"; # string : @some : @parameter%add_bribe : @storage
            FAILWITH;   # FAILED
          }; # @some : @parameter%add_bribe : @storage
        # self.data.uid += 1 # @some : @parameter%add_bribe : @storage
        DIG 2;      # @storage : @some : @parameter%add_bribe
        DUP;        # @storage : @storage : @some : @parameter%add_bribe
        GET 3;      # nat : @storage : @some : @parameter%add_bribe
        PUSH nat 1; # nat : nat : @storage : @some : @parameter%add_bribe
        ADD;        # nat : @storage : @some : @parameter%add_bribe
        UPDATE 3;   # @storage : @some : @parameter%add_bribe
        # self.data.epoch_bribes[sp.record(epoch = params.epoch, bribe_id = self.data.uid)] = sp.record(provider = sp.sender, bribe = sp.record(type = params.type, value = params.value)) # @storage : @some : @parameter%add_bribe
        DUP;        # @storage : @storage : @some : @parameter%add_bribe
        DUG 3;      # @storage : @some : @parameter%add_bribe : @storage
        UNPAIR;     # pair (big_map %claim_ledger (pair (nat %token_id) (nat %bribe_id)) unit) (big_map %epoch_bribes (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value)))) : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe : @storage
        UNPAIR;     # big_map (pair (nat %token_id) (nat %bribe_id)) unit : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe : @storage
        SWAP;       # big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe : @storage
        DIG 4;      # @parameter%add_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @storage
        DUP;        # @parameter%add_bribe : @parameter%add_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @storage
        GET 4;      # nat : @parameter%add_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @storage
        SWAP;       # @parameter%add_bribe : nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @storage
        DUP;        # @parameter%add_bribe : @parameter%add_bribe : nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @storage
        DUG 6;      # @parameter%add_bribe : nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe : @storage
        GET 3;      # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe : @storage
        PAIR;       # pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe : @storage
        SENDER;     # @sender : pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe : @storage
        PAIR;       # pair @sender (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat) : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe : @storage
        SOME;       # option (pair @sender (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe : @storage
        DIG 6;      # @storage : option (pair @sender (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe
        GET 3;      # nat : option (pair @sender (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe
        DUP 7;      # @parameter%add_bribe : nat : option (pair @sender (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe
        CAR;        # nat : nat : option (pair @sender (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe
        PAIR;       # pair nat nat : option (pair @sender (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe
        UPDATE;     # big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe
        SWAP;       # big_map (pair (nat %token_id) (nat %bribe_id)) unit : big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)) : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe
        PAIR;       # pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat))) : pair (nat %uid) (address %voter) : @some : @parameter%add_bribe
        PAIR;       # pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter)) : @some : @parameter%add_bribe
        DUG 2;      # @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
        SWAP;       # @parameter%add_bribe : @some : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
        # with params.type.match_cases(...): # @parameter%add_bribe : @some : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
        DUP;        # @parameter%add_bribe : @parameter%add_bribe : @some : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
        DUG 2;      # @parameter%add_bribe : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
        GET 3;      # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
        IF_LEFT
          {
            # if params.value > 0: # address : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
            PUSH nat 0; # nat : address : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
            DUP 4;      # @parameter%add_bribe : nat : address : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
            GET 4;      # nat : nat : address : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
            COMPARE;    # int : address : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
            GT;         # bool : address : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
            IF
              {
                SWAP;       # @some : address : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                DROP;       # address : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = params.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), fa12, entry_point='transfer').open_some()) # address : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                IF_NONE
                  {
                    PUSH int 16; # int : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                NIL operation; # list operation : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                SWAP;       # @some : list operation : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                DIG 3;      # @parameter%add_bribe : mutez : @some : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                GET 4;      # nat : mutez : @some : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                SELF_ADDRESS; # @self : nat : mutez : @some : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                SENDER;     # @sender : @self : nat : mutez : @some : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                PAIR 3;     # pair @sender (pair @self nat) : mutez : @some : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                CONS;       # list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
              }
              {
                DROP 3;     # pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                NIL operation; # list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
              }; # list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
          }
          {
            IF_LEFT
              {
                # if params.value > 0: # pair address nat : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                PUSH nat 0; # nat : pair address nat : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                DUP 4;      # @parameter%add_bribe : nat : pair address nat : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                GET 4;      # nat : nat : pair address nat : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                COMPARE;    # int : pair address nat : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                GT;         # bool : pair address nat : @some : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                IF
                  {
                    SWAP;       # @some : pair address nat : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    DROP;       # pair address nat : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    # sp.transfer(sp.list([sp.record(from_ = sp.sender, txs = sp.list([sp.record(to_ = sp.self_address, token_id = sp.snd(fa2), amount = params.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), sp.fst(fa2), entry_point='transfer').open_some()) # pair address nat : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    DUP;        # pair address nat : pair address nat : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    CAR;        # address : pair address nat : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : pair address nat : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    IF_NONE
                      {
                        PUSH int 55; # int : pair address nat : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair address nat : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    NIL operation; # list operation : @some : pair address nat : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    SWAP;       # @some : list operation : pair address nat : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    PUSH mutez 0; # mutez : @some : list operation : pair address nat : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    DIG 6;      # @parameter%add_bribe : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    GET 4;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    DIG 6;      # pair address nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    CDR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    SELF_ADDRESS; # @self : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    PAIR 3;     # pair @self (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    SENDER;     # @sender : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    PAIR;       # pair @sender (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    CONS;       # list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                  }
                  {
                    DROP 3;     # pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    NIL operation; # list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                  }; # list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
              }
              {
                DROP 2;     # @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                # sp.verify(sp.amount == sp.mul(params.value, sp.mutez(1)), 'INCORRECT_TEZ_VALUE_SENT') # @parameter%add_bribe : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                GET 4;      # nat : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                PUSH mutez 1; # mutez : nat : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                SWAP;       # nat : mutez : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                MUL;        # mutez : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                AMOUNT;     # @amount : mutez : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                COMPARE;    # int : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                EQ;         # bool : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                IF
                  {}
                  {
                    PUSH string "INCORRECT_TEZ_VALUE_SENT"; # string : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                    FAILWITH;   # FAILED
                  }; # pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
                NIL operation; # list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
              }; # list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
          }; # list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
      }
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%claim
            # == claim ==
            # sp.verify(sp.sender == self.data.voter, 'NOT_AUTHORISED') # @storage : @parameter%claim
            DUP;        # @storage : @storage : @parameter%claim
            DUG 2;      # @storage : @parameter%claim : @storage
            GET 4;      # address : @parameter%claim : @storage
            SENDER;     # @sender : address : @parameter%claim : @storage
            COMPARE;    # int : @parameter%claim : @storage
            EQ;         # bool : @parameter%claim : @storage
            IF
              {}
              {
                PUSH string "NOT_AUTHORISED"; # string : @parameter%claim : @storage
                FAILWITH;   # FAILED
              }; # @parameter%claim : @storage
            SWAP;       # @storage : @parameter%claim
            # sp.verify(self.data.epoch_bribes.contains(sp.record(epoch = params.epoch, bribe_id = params.bribe_id)), 'INVALID_BRIBE_ID_OR_EPOCH') # @storage : @parameter%claim
            DUP;        # @storage : @storage : @parameter%claim
            DUG 2;      # @storage : @parameter%claim : @storage
            CAR;        # pair (big_map %claim_ledger (pair (nat %token_id) (nat %bribe_id)) unit) (big_map %epoch_bribes (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value)))) : @parameter%claim : @storage
            CDR;        # big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%claim : @storage
            SWAP;       # @parameter%claim : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            DUP;        # @parameter%claim : @parameter%claim : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            GET 7;      # nat : @parameter%claim : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            SWAP;       # @parameter%claim : nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            DUP;        # @parameter%claim : @parameter%claim : nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            DUG 3;      # @parameter%claim : nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%claim : @storage
            GET 5;      # nat : nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%claim : @storage
            PAIR;       # pair nat nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%claim : @storage
            MEM;        # bool : @parameter%claim : @storage
            IF
              {}
              {
                PUSH string "INVALID_BRIBE_ID_OR_EPOCH"; # string : @parameter%claim : @storage
                FAILWITH;   # FAILED
              }; # @parameter%claim : @storage
            SWAP;       # @storage : @parameter%claim
            # sp.verify(~ (self.data.claim_ledger.contains(sp.record(token_id = params.token_id, bribe_id = params.bribe_id))), 'VOTER_HAS_ALREADY_CLAIMED_BRIBE') # @storage : @parameter%claim
            DUP;        # @storage : @storage : @parameter%claim
            DUG 2;      # @storage : @parameter%claim : @storage
            CAR;        # pair (big_map %claim_ledger (pair (nat %token_id) (nat %bribe_id)) unit) (big_map %epoch_bribes (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value)))) : @parameter%claim : @storage
            CAR;        # big_map (pair (nat %token_id) (nat %bribe_id)) unit : @parameter%claim : @storage
            SWAP;       # @parameter%claim : big_map (pair (nat %token_id) (nat %bribe_id)) unit : @storage
            DUP;        # @parameter%claim : @parameter%claim : big_map (pair (nat %token_id) (nat %bribe_id)) unit : @storage
            GET 7;      # nat : @parameter%claim : big_map (pair (nat %token_id) (nat %bribe_id)) unit : @storage
            SWAP;       # @parameter%claim : nat : big_map (pair (nat %token_id) (nat %bribe_id)) unit : @storage
            DUP;        # @parameter%claim : @parameter%claim : nat : big_map (pair (nat %token_id) (nat %bribe_id)) unit : @storage
            DUG 3;      # @parameter%claim : nat : big_map (pair (nat %token_id) (nat %bribe_id)) unit : @parameter%claim : @storage
            CAR;        # nat : nat : big_map (pair (nat %token_id) (nat %bribe_id)) unit : @parameter%claim : @storage
            PAIR;       # pair nat nat : big_map (pair (nat %token_id) (nat %bribe_id)) unit : @parameter%claim : @storage
            MEM;        # bool : @parameter%claim : @storage
            IF
              {
                PUSH string "VOTER_HAS_ALREADY_CLAIMED_BRIBE"; # string : @parameter%claim : @storage
                FAILWITH;   # FAILED
              }
              {}; # @parameter%claim : @storage
            SWAP;       # @storage : @parameter%claim
            # compute_bribe_178 = sp.local("compute_bribe_178", self.data.epoch_bribes[sp.record(epoch = params.epoch, bribe_id = params.bribe_id)]) # @storage : @parameter%claim
            DUP;        # @storage : @storage : @parameter%claim
            DUG 2;      # @storage : @parameter%claim : @storage
            CAR;        # pair (big_map %claim_ledger (pair (nat %token_id) (nat %bribe_id)) unit) (big_map %epoch_bribes (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value)))) : @parameter%claim : @storage
            CDR;        # big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%claim : @storage
            SWAP;       # @parameter%claim : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            DUP;        # @parameter%claim : @parameter%claim : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            GET 7;      # nat : @parameter%claim : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            SWAP;       # @parameter%claim : nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            DUP;        # @parameter%claim : @parameter%claim : nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            DUG 3;      # @parameter%claim : nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%claim : @storage
            GET 5;      # nat : nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%claim : @storage
            PAIR;       # pair nat nat : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%claim : @storage
            GET;        # option (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%claim : @storage
            IF_NONE
              {
                PUSH int 178; # int : @parameter%claim : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @parameter%claim : @storage
            # with compute_bribe_178.value.bribe.type.match_cases(...): # @some : @parameter%claim : @storage
            DUP;        # @some : @some : @parameter%claim : @storage
            GET 3;      # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : @parameter%claim : @storage
            IF_LEFT
              {
                # if ((compute_bribe_178.value.bribe.value * params.vote_share) // 1000000000000000000) > 0: # address : @some : @parameter%claim : @storage
                PUSH nat 0; # nat : address : @some : @parameter%claim : @storage
                PUSH nat 1000000000000000000; # nat : nat : address : @some : @parameter%claim : @storage
                DUP 5;      # @parameter%claim : nat : nat : address : @some : @parameter%claim : @storage
                GET 8;      # nat : nat : nat : address : @some : @parameter%claim : @storage
                DUP 5;      # @some : nat : nat : nat : address : @some : @parameter%claim : @storage
                GET 4;      # nat : nat : nat : nat : address : @some : @parameter%claim : @storage
                MUL;        # nat : nat : nat : address : @some : @parameter%claim : @storage
                EDIV;       # option (pair nat nat) : nat : address : @some : @parameter%claim : @storage
                IF_NONE
                  {
                    PUSH int 179; # int : nat : address : @some : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    CAR;        # nat : nat : address : @some : @parameter%claim : @storage
                  }; # nat : nat : address : @some : @parameter%claim : @storage
                COMPARE;    # int : address : @some : @parameter%claim : @storage
                GT;         # bool : address : @some : @parameter%claim : @storage
                IF
                  {
                    # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.owner, value = (compute_bribe_178.value.bribe.value * params.vote_share) // 1000000000000000000), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), fa12, entry_point='transfer').open_some()) # address : @some : @parameter%claim : @storage
                    CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : @some : @parameter%claim : @storage
                    IF_NONE
                      {
                        PUSH int 16; # int : @some : @parameter%claim : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @some : @parameter%claim : @storage
                    NIL operation; # list operation : @some : @some : @parameter%claim : @storage
                    SWAP;       # @some : list operation : @some : @parameter%claim : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @some : @parameter%claim : @storage
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : @some : @parameter%claim : @storage
                    DUP 6;      # @parameter%claim : nat : mutez : @some : list operation : @some : @parameter%claim : @storage
                    GET 8;      # nat : nat : mutez : @some : list operation : @some : @parameter%claim : @storage
                    DIG 5;      # @some : nat : nat : mutez : @some : list operation : @parameter%claim : @storage
                    GET 4;      # nat : nat : nat : mutez : @some : list operation : @parameter%claim : @storage
                    MUL;        # nat : nat : mutez : @some : list operation : @parameter%claim : @storage
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : @parameter%claim : @storage
                    IF_NONE
                      {
                        PUSH int 179; # int : mutez : @some : list operation : @parameter%claim : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : @parameter%claim : @storage
                      }; # nat : mutez : @some : list operation : @parameter%claim : @storage
                    DUP 5;      # @parameter%claim : nat : mutez : @some : list operation : @parameter%claim : @storage
                    GET 3;      # address : nat : mutez : @some : list operation : @parameter%claim : @storage
                    SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : @parameter%claim : @storage
                    PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : @parameter%claim : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%claim : @storage
                    CONS;       # list operation : @parameter%claim : @storage
                  }
                  {
                    DROP 2;     # @parameter%claim : @storage
                    NIL operation; # list operation : @parameter%claim : @storage
                  }; # list operation : @parameter%claim : @storage
              }
              {
                IF_LEFT
                  {
                    # if ((compute_bribe_178.value.bribe.value * params.vote_share) // 1000000000000000000) > 0: # pair address nat : @some : @parameter%claim : @storage
                    PUSH nat 0; # nat : pair address nat : @some : @parameter%claim : @storage
                    PUSH nat 1000000000000000000; # nat : nat : pair address nat : @some : @parameter%claim : @storage
                    DUP 5;      # @parameter%claim : nat : nat : pair address nat : @some : @parameter%claim : @storage
                    GET 8;      # nat : nat : nat : pair address nat : @some : @parameter%claim : @storage
                    DUP 5;      # @some : nat : nat : nat : pair address nat : @some : @parameter%claim : @storage
                    GET 4;      # nat : nat : nat : nat : pair address nat : @some : @parameter%claim : @storage
                    MUL;        # nat : nat : nat : pair address nat : @some : @parameter%claim : @storage
                    EDIV;       # option (pair nat nat) : nat : pair address nat : @some : @parameter%claim : @storage
                    IF_NONE
                      {
                        PUSH int 179; # int : nat : pair address nat : @some : @parameter%claim : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : pair address nat : @some : @parameter%claim : @storage
                      }; # nat : nat : pair address nat : @some : @parameter%claim : @storage
                    COMPARE;    # int : pair address nat : @some : @parameter%claim : @storage
                    GT;         # bool : pair address nat : @some : @parameter%claim : @storage
                    IF
                      {
                        # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.owner, token_id = sp.snd(fa2), amount = (compute_bribe_178.value.bribe.value * params.vote_share) // 1000000000000000000)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), sp.fst(fa2), entry_point='transfer').open_some()) # pair address nat : @some : @parameter%claim : @storage
                        DUP;        # pair address nat : pair address nat : @some : @parameter%claim : @storage
                        CAR;        # address : pair address nat : @some : @parameter%claim : @storage
                        CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : pair address nat : @some : @parameter%claim : @storage
                        IF_NONE
                          {
                            PUSH int 55; # int : pair address nat : @some : @parameter%claim : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair address nat : @some : @parameter%claim : @storage
                        NIL operation; # list operation : @some : pair address nat : @some : @parameter%claim : @storage
                        SWAP;       # @some : list operation : pair address nat : @some : @parameter%claim : @storage
                        PUSH mutez 0; # mutez : @some : list operation : pair address nat : @some : @parameter%claim : @storage
                        NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @some : @parameter%claim : @storage
                        NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @some : @parameter%claim : @storage
                        PUSH nat 1000000000000000000; # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @some : @parameter%claim : @storage
                        DUP 9;      # @parameter%claim : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @some : @parameter%claim : @storage
                        GET 8;      # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @some : @parameter%claim : @storage
                        DIG 8;      # @some : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @parameter%claim : @storage
                        GET 4;      # nat : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @parameter%claim : @storage
                        MUL;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @parameter%claim : @storage
                        EDIV;       # option (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @parameter%claim : @storage
                        IF_NONE
                          {
                            PUSH int 179; # int : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @parameter%claim : @storage
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @parameter%claim : @storage
                          }; # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @parameter%claim : @storage
                        DIG 6;      # pair address nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%claim : @storage
                        CDR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%claim : @storage
                        DUP 8;      # @parameter%claim : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%claim : @storage
                        GET 3;      # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%claim : @storage
                        PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%claim : @storage
                        CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%claim : @storage
                        SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%claim : @storage
                        PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%claim : @storage
                        CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%claim : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%claim : @storage
                        CONS;       # list operation : @parameter%claim : @storage
                      }
                      {
                        DROP 2;     # @parameter%claim : @storage
                        NIL operation; # list operation : @parameter%claim : @storage
                      }; # list operation : @parameter%claim : @storage
                  }
                  {
                    DROP;       # @some : @parameter%claim : @storage
                    # sp.send(params.owner, sp.mul((compute_bribe_178.value.bribe.value * params.vote_share) // 1000000000000000000, sp.mutez(1))) # @some : @parameter%claim : @storage
                    NIL operation; # list operation : @some : @parameter%claim : @storage
                    DUP 3;      # @parameter%claim : list operation : @some : @parameter%claim : @storage
                    GET 3;      # address : list operation : @some : @parameter%claim : @storage
                    CONTRACT unit; # option (contract unit) : list operation : @some : @parameter%claim : @storage
                    IF_NONE
                      {
                        PUSH int 203; # int : list operation : @some : @parameter%claim : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @some : @parameter%claim : @storage
                    PUSH mutez 1; # mutez : @some : list operation : @some : @parameter%claim : @storage
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : @some : @parameter%claim : @storage
                    DUP 6;      # @parameter%claim : nat : mutez : @some : list operation : @some : @parameter%claim : @storage
                    GET 8;      # nat : nat : mutez : @some : list operation : @some : @parameter%claim : @storage
                    DIG 5;      # @some : nat : nat : mutez : @some : list operation : @parameter%claim : @storage
                    GET 4;      # nat : nat : nat : mutez : @some : list operation : @parameter%claim : @storage
                    MUL;        # nat : nat : mutez : @some : list operation : @parameter%claim : @storage
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : @parameter%claim : @storage
                    IF_NONE
                      {
                        PUSH int 179; # int : mutez : @some : list operation : @parameter%claim : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : @parameter%claim : @storage
                      }; # nat : mutez : @some : list operation : @parameter%claim : @storage
                    MUL;        # mutez : @some : list operation : @parameter%claim : @storage
                    UNIT;       # unit : mutez : @some : list operation : @parameter%claim : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%claim : @storage
                    CONS;       # list operation : @parameter%claim : @storage
                  }; # list operation : @parameter%claim : @storage
              }; # list operation : @parameter%claim : @storage
            # self.data.claim_ledger[sp.record(token_id = params.token_id, bribe_id = params.bribe_id)] = sp.unit # list operation : @parameter%claim : @storage
            DIG 2;      # @storage : list operation : @parameter%claim
            UNPAIR;     # pair (big_map %claim_ledger (pair (nat %token_id) (nat %bribe_id)) unit) (big_map %epoch_bribes (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value)))) : pair (nat %uid) (address %voter) : list operation : @parameter%claim
            UNPAIR;     # big_map (pair (nat %token_id) (nat %bribe_id)) unit : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : pair (nat %uid) (address %voter) : list operation : @parameter%claim
            PUSH (option unit) (Some Unit); # option unit : big_map (pair (nat %token_id) (nat %bribe_id)) unit : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : pair (nat %uid) (address %voter) : list operation : @parameter%claim
            DIG 5;      # @parameter%claim : option unit : big_map (pair (nat %token_id) (nat %bribe_id)) unit : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : pair (nat %uid) (address %voter) : list operation
            DUP;        # @parameter%claim : @parameter%claim : option unit : big_map (pair (nat %token_id) (nat %bribe_id)) unit : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : pair (nat %uid) (address %voter) : list operation
            GET 7;      # nat : @parameter%claim : option unit : big_map (pair (nat %token_id) (nat %bribe_id)) unit : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : pair (nat %uid) (address %voter) : list operation
            SWAP;       # @parameter%claim : nat : option unit : big_map (pair (nat %token_id) (nat %bribe_id)) unit : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : pair (nat %uid) (address %voter) : list operation
            CAR;        # nat : nat : option unit : big_map (pair (nat %token_id) (nat %bribe_id)) unit : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : pair (nat %uid) (address %voter) : list operation
            PAIR;       # pair nat nat : option unit : big_map (pair (nat %token_id) (nat %bribe_id)) unit : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : pair (nat %uid) (address %voter) : list operation
            UPDATE;     # big_map (pair nat nat) unit : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : pair (nat %uid) (address %voter) : list operation
            PAIR;       # pair (big_map (pair nat nat) unit) (big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value)))) : pair (nat %uid) (address %voter) : list operation
            PAIR;       # pair (pair (big_map (pair nat nat) unit) (big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))))) (pair (nat %uid) (address %voter)) : list operation
            SWAP;       # list operation : pair (pair (big_map (pair nat nat) unit) (big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))))) (pair (nat %uid) (address %voter))
          }
          {
            SWAP;       # @storage : @parameter%return_bribe
            # == return_bribe ==
            # sp.verify(sp.sender == self.data.voter, 'NOT_AUTHORISED') # @storage : @parameter%return_bribe
            DUP;        # @storage : @storage : @parameter%return_bribe
            DUG 2;      # @storage : @parameter%return_bribe : @storage
            GET 4;      # address : @parameter%return_bribe : @storage
            SENDER;     # @sender : address : @parameter%return_bribe : @storage
            COMPARE;    # int : @parameter%return_bribe : @storage
            EQ;         # bool : @parameter%return_bribe : @storage
            IF
              {}
              {
                PUSH string "NOT_AUTHORISED"; # string : @parameter%return_bribe : @storage
                FAILWITH;   # FAILED
              }; # @parameter%return_bribe : @storage
            SWAP;       # @storage : @parameter%return_bribe
            # sp.verify(self.data.epoch_bribes.contains(params), 'INVALID_BRIBE_ID_OR_EPOCH') # @storage : @parameter%return_bribe
            DUP;        # @storage : @storage : @parameter%return_bribe
            DUG 2;      # @storage : @parameter%return_bribe : @storage
            CAR;        # pair (big_map %claim_ledger (pair (nat %token_id) (nat %bribe_id)) unit) (big_map %epoch_bribes (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value)))) : @parameter%return_bribe : @storage
            CDR;        # big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%return_bribe : @storage
            SWAP;       # @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            DUP;        # @parameter%return_bribe : @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            DUG 2;      # @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%return_bribe : @storage
            MEM;        # bool : @parameter%return_bribe : @storage
            IF
              {}
              {
                PUSH string "INVALID_BRIBE_ID_OR_EPOCH"; # string : @parameter%return_bribe : @storage
                FAILWITH;   # FAILED
              }; # @parameter%return_bribe : @storage
            SWAP;       # @storage : @parameter%return_bribe
            # compute_bribe_218 = sp.local("compute_bribe_218", self.data.epoch_bribes[params]) # @storage : @parameter%return_bribe
            DUP;        # @storage : @storage : @parameter%return_bribe
            DUG 2;      # @storage : @parameter%return_bribe : @storage
            CAR;        # pair (big_map %claim_ledger (pair (nat %token_id) (nat %bribe_id)) unit) (big_map %epoch_bribes (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value)))) : @parameter%return_bribe : @storage
            CDR;        # big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%return_bribe : @storage
            SWAP;       # @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            DUP;        # @parameter%return_bribe : @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @storage
            DUG 2;      # @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%return_bribe : @storage
            GET;        # option (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%return_bribe : @storage
            IF_NONE
              {
                PUSH int 218; # int : @parameter%return_bribe : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @parameter%return_bribe : @storage
            # with compute_bribe_218.value.bribe.type.match_cases(...): # @some : @parameter%return_bribe : @storage
            DUP;        # @some : @some : @parameter%return_bribe : @storage
            GET 3;      # or (address %fa12) (or (pair %fa2 address nat) (unit %tez)) : @some : @parameter%return_bribe : @storage
            IF_LEFT
              {
                # if compute_bribe_218.value.bribe.value > 0: # address : @some : @parameter%return_bribe : @storage
                PUSH nat 0; # nat : address : @some : @parameter%return_bribe : @storage
                DUP 3;      # @some : nat : address : @some : @parameter%return_bribe : @storage
                GET 4;      # nat : nat : address : @some : @parameter%return_bribe : @storage
                COMPARE;    # int : address : @some : @parameter%return_bribe : @storage
                GT;         # bool : address : @some : @parameter%return_bribe : @storage
                IF
                  {
                    # sp.transfer(sp.record(from_ = sp.self_address, to_ = compute_bribe_218.value.provider, value = compute_bribe_218.value.bribe.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), fa12, entry_point='transfer').open_some()) # address : @some : @parameter%return_bribe : @storage
                    CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : @some : @parameter%return_bribe : @storage
                    IF_NONE
                      {
                        PUSH int 16; # int : @some : @parameter%return_bribe : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @some : @parameter%return_bribe : @storage
                    NIL operation; # list operation : @some : @some : @parameter%return_bribe : @storage
                    SWAP;       # @some : list operation : @some : @parameter%return_bribe : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @some : @parameter%return_bribe : @storage
                    DIG 3;      # @some : mutez : @some : list operation : @parameter%return_bribe : @storage
                    DUP;        # @some : @some : mutez : @some : list operation : @parameter%return_bribe : @storage
                    GET 4;      # nat : @some : mutez : @some : list operation : @parameter%return_bribe : @storage
                    SWAP;       # @some : nat : mutez : @some : list operation : @parameter%return_bribe : @storage
                    CAR;        # address : nat : mutez : @some : list operation : @parameter%return_bribe : @storage
                    SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : @parameter%return_bribe : @storage
                    PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : @parameter%return_bribe : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%return_bribe : @storage
                    CONS;       # list operation : @parameter%return_bribe : @storage
                  }
                  {
                    DROP 2;     # @parameter%return_bribe : @storage
                    NIL operation; # list operation : @parameter%return_bribe : @storage
                  }; # list operation : @parameter%return_bribe : @storage
              }
              {
                IF_LEFT
                  {
                    # if compute_bribe_218.value.bribe.value > 0: # pair address nat : @some : @parameter%return_bribe : @storage
                    PUSH nat 0; # nat : pair address nat : @some : @parameter%return_bribe : @storage
                    DUP 3;      # @some : nat : pair address nat : @some : @parameter%return_bribe : @storage
                    GET 4;      # nat : nat : pair address nat : @some : @parameter%return_bribe : @storage
                    COMPARE;    # int : pair address nat : @some : @parameter%return_bribe : @storage
                    GT;         # bool : pair address nat : @some : @parameter%return_bribe : @storage
                    IF
                      {
                        # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = compute_bribe_218.value.provider, token_id = sp.snd(fa2), amount = compute_bribe_218.value.bribe.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), sp.fst(fa2), entry_point='transfer').open_some()) # pair address nat : @some : @parameter%return_bribe : @storage
                        DUP;        # pair address nat : pair address nat : @some : @parameter%return_bribe : @storage
                        CAR;        # address : pair address nat : @some : @parameter%return_bribe : @storage
                        CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : pair address nat : @some : @parameter%return_bribe : @storage
                        IF_NONE
                          {
                            PUSH int 55; # int : pair address nat : @some : @parameter%return_bribe : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair address nat : @some : @parameter%return_bribe : @storage
                        NIL operation; # list operation : @some : pair address nat : @some : @parameter%return_bribe : @storage
                        SWAP;       # @some : list operation : pair address nat : @some : @parameter%return_bribe : @storage
                        PUSH mutez 0; # mutez : @some : list operation : pair address nat : @some : @parameter%return_bribe : @storage
                        NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @some : @parameter%return_bribe : @storage
                        NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @some : @parameter%return_bribe : @storage
                        DUP 7;      # @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @some : @parameter%return_bribe : @storage
                        GET 4;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair address nat : @some : @parameter%return_bribe : @storage
                        DIG 6;      # pair address nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%return_bribe : @storage
                        CDR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%return_bribe : @storage
                        DIG 7;      # @some : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%return_bribe : @storage
                        CAR;        # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%return_bribe : @storage
                        PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%return_bribe : @storage
                        CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%return_bribe : @storage
                        SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%return_bribe : @storage
                        PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%return_bribe : @storage
                        CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%return_bribe : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%return_bribe : @storage
                        CONS;       # list operation : @parameter%return_bribe : @storage
                      }
                      {
                        DROP 2;     # @parameter%return_bribe : @storage
                        NIL operation; # list operation : @parameter%return_bribe : @storage
                      }; # list operation : @parameter%return_bribe : @storage
                  }
                  {
                    DROP;       # @some : @parameter%return_bribe : @storage
                    # sp.send(compute_bribe_218.value.provider, sp.mul(compute_bribe_218.value.bribe.value, sp.mutez(1))) # @some : @parameter%return_bribe : @storage
                    DUP;        # @some : @some : @parameter%return_bribe : @storage
                    CAR;        # address : @some : @parameter%return_bribe : @storage
                    CONTRACT unit; # option (contract unit) : @some : @parameter%return_bribe : @storage
                    IF_NONE
                      {
                        PUSH int 242; # int : @some : @parameter%return_bribe : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @some : @parameter%return_bribe : @storage
                    NIL operation; # list operation : @some : @some : @parameter%return_bribe : @storage
                    SWAP;       # @some : list operation : @some : @parameter%return_bribe : @storage
                    PUSH mutez 1; # mutez : @some : list operation : @some : @parameter%return_bribe : @storage
                    DIG 3;      # @some : mutez : @some : list operation : @parameter%return_bribe : @storage
                    GET 4;      # nat : mutez : @some : list operation : @parameter%return_bribe : @storage
                    MUL;        # mutez : @some : list operation : @parameter%return_bribe : @storage
                    UNIT;       # unit : mutez : @some : list operation : @parameter%return_bribe : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%return_bribe : @storage
                    CONS;       # list operation : @parameter%return_bribe : @storage
                  }; # list operation : @parameter%return_bribe : @storage
              }; # list operation : @parameter%return_bribe : @storage
            # self.data.epoch_bribes[params].bribe.value = 0 # list operation : @parameter%return_bribe : @storage
            DIG 2;      # @storage : list operation : @parameter%return_bribe
            UNPAIR;     # pair (big_map %claim_ledger (pair (nat %token_id) (nat %bribe_id)) unit) (big_map %epoch_bribes (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value)))) : pair (nat %uid) (address %voter) : list operation : @parameter%return_bribe
            UNPAIR;     # big_map (pair (nat %token_id) (nat %bribe_id)) unit : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : pair (nat %uid) (address %voter) : list operation : @parameter%return_bribe
            SWAP;       # big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation : @parameter%return_bribe
            DUP;        # big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation : @parameter%return_bribe
            DIG 5;      # @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
            DUP;        # @parameter%return_bribe : @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
            DUG 2;      # @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
            GET;        # option (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
            IF_NONE
              {
                PUSH int 244; # int : @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
                FAILWITH;   # FAILED
              }
              {}; # @some : @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
            DUP;        # @some : @some : @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
            CDR;        # pair (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value) : @some : @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
            PUSH nat 0; # nat : pair (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value) : @some : @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
            UPDATE 2;   # pair (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value) : @some : @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
            UPDATE 2;   # @some : @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
            SOME;       # option (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : @parameter%return_bribe : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
            SWAP;       # @parameter%return_bribe : option (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
            UPDATE;     # big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : big_map (pair (nat %token_id) (nat %bribe_id)) unit : pair (nat %uid) (address %voter) : list operation
            SWAP;       # big_map (pair (nat %token_id) (nat %bribe_id)) unit : big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))) : pair (nat %uid) (address %voter) : list operation
            PAIR;       # pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value)))) : pair (nat %uid) (address %voter) : list operation
            PAIR;       # pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))))) (pair (nat %uid) (address %voter)) : list operation
            SWAP;       # list operation : pair (pair (big_map (pair (nat %token_id) (nat %bribe_id)) unit) (big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))))) (pair (nat %uid) (address %voter))
          }; # list operation : pair (pair (big_map (pair nat nat) unit) (big_map (pair (nat %epoch) (nat %bribe_id)) (pair (address %provider) (pair %bribe (or %type (address %fa12) (or (pair %fa2 address nat) (unit %tez))) (nat %value))))) (pair (nat %uid) (address %voter))
      }; # list operation : pair (pair (big_map (pair nat nat) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter))
    PAIR;       # pair (list operation) (pair (pair (big_map (pair nat nat) unit) (big_map (pair nat nat) (pair address (pair (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)))) (pair (nat %uid) (address %voter)))
  };