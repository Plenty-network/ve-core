parameter (or (unit %claim) (pair %exchange (nat %token) (nat %value)));
storage   (pair (pair (pair (timestamp %end) (timestamp %genesis)) (pair (big_map %ledger address (pair (nat %balance) (pair (nat %release_rate) (pair (nat %vested) (timestamp %last_claim))))) (address %plenty_address))) (pair (pair (nat %plenty_exchange_val) (address %ply_address)) (pair (address %wrap_address) (nat %wrap_exchange_val))));
code
  {
    # Private variable: update_ledger # pair @parameter @storage
    LAMBDA
      (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
      (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
      {
        UNPAIR;     # pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        SWAP;       # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat
        # if ~ (self.data.ledger.contains(_x0.address)): # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat
        DUP;        # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat
        DUG 2;      # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CAR;        # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        GET 3;      # big_map address (pair nat (pair nat (pair nat timestamp))) : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        SWAP;       # pair address nat : big_map address (pair nat (pair nat (pair nat timestamp))) : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        DUP;        # pair address nat : pair address nat : big_map address (pair nat (pair nat (pair nat timestamp))) : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        DUG 2;      # pair address nat : big_map address (pair nat (pair nat (pair nat timestamp))) : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CAR;        # address : big_map address (pair nat (pair nat (pair nat timestamp))) : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        MEM;        # bool : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        IF
          {}
          {
            SWAP;       # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat
            # self.data.ledger[_x0.address] = sp.record(balance = 0, release_rate = 0, vested = 0, last_claim = sp.timestamp(0)) # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat
            UNPAIR;     # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : pair (pair nat address) (pair address nat) : pair address nat
            UNPAIR;     # pair timestamp timestamp : pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair (pair nat address) (pair address nat) : pair address nat
            SWAP;       # pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            UNPAIR;     # big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            PUSH timestamp "1970-01-01T00:00:00Z"; # timestamp : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            PUSH nat 0; # nat : timestamp : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            DUP;        # nat : nat : timestamp : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            DUP;        # nat : nat : nat : timestamp : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            PAIR 4;     # pair nat (pair nat (pair nat timestamp)) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            SOME;       # option (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            DUP 6;      # pair address nat : option (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            CAR;        # address : option (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            UPDATE;     # big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            PAIR;       # pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            SWAP;       # pair timestamp timestamp : pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair (pair nat address) (pair address nat) : pair address nat
            PAIR;       # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : pair (pair nat address) (pair address nat) : pair address nat
            PAIR;       # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat
            SWAP;       # pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
          }; # pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        SWAP;       # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat
        # compute_ve_swap_102 = sp.local("compute_ve_swap_102", self.data.ledger[_x0.address]) # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat
        DUP;        # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat
        DUG 2;      # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CAR;        # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        GET 3;      # big_map address (pair nat (pair nat (pair nat timestamp))) : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        SWAP;       # pair address nat : big_map address (pair nat (pair nat (pair nat timestamp))) : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        DUP;        # pair address nat : pair address nat : big_map address (pair nat (pair nat (pair nat timestamp))) : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        DUG 2;      # pair address nat : big_map address (pair nat (pair nat (pair nat timestamp))) : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CAR;        # address : big_map address (pair nat (pair nat (pair nat timestamp))) : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        GET;        # option (pair nat (pair nat (pair nat timestamp))) : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        IF_NONE
          {
            PUSH int 102; # int : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
            FAILWITH;   # FAILED
          }
          {}; # @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        # compute_ve_swap_103 = sp.local("compute_ve_swap_103", self.data.genesis) # @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        DUP 3;      # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CAR;        # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CAR;        # pair timestamp timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CDR;        # timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        # compute_ve_swap_104 = sp.local("compute_ve_swap_104", self.data.end) # timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        DUP 4;      # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CAR;        # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CAR;        # pair timestamp timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CAR;        # timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        # self.data.ledger[_x0.address].vested += sp.min(_x0.value, (_x0.value // sp.as_nat(compute_ve_swap_104.value - compute_ve_swap_103.value)) * sp.as_nat(sp.now - compute_ve_swap_103.value)) + sp.min(compute_ve_swap_102.value.balance, compute_ve_swap_102.value.release_rate * sp.as_nat(sp.now - compute_ve_swap_102.value.last_claim)) # timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        DIG 4;      # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : timestamp : timestamp : @some : pair address nat
        UNPAIR;     # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        UNPAIR;     # pair timestamp timestamp : pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SWAP;       # pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        UNPAIR;     # big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP;        # big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 9;      # pair address nat : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        CAR;        # address : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP;        # address : address : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUG 2;      # address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        GET;        # option (pair nat (pair nat (pair nat timestamp))) : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF_NONE
          {
            PUSH int 118; # int : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            FAILWITH;   # FAILED
          }
          {}; # @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP;        # @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        GET 5;      # nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 10;     # @some : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        GET 6;      # timestamp : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        NOW;        # @now : timestamp : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SUB;        # int : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        ISNAT;      # option nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF_NONE
          {
            PUSH int 114; # int : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 11;     # @some : @some : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        GET 3;      # nat : @some : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        MUL;        # nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 11;     # @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        CAR;        # nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP;        # nat : nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 3;      # nat : nat : nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        COMPARE;    # int : nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        LE;         # bool : nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF
          {
            DROP;       # nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
          }
          {
            SWAP;       # nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            DROP;       # nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
          }; # nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 10;     # timestamp : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        NOW;        # @now : timestamp : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SUB;        # int : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        ISNAT;      # option nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF_NONE
          {
            PUSH int 110; # int : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 11;     # timestamp : @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 11;     # timestamp : timestamp : @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SUB;        # int : @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        ISNAT;      # option nat : @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF_NONE
          {
            PUSH int 107; # int : @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 14;     # pair address nat : @some : @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        CDR;        # nat : @some : @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        EDIV;       # option (pair nat nat) : @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF_NONE
          {
            PUSH int 107; # int : @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
          }; # nat : @some : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        MUL;        # nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 13;     # pair address nat : nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        CDR;        # nat : nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP;        # nat : nat : nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 3;      # nat : nat : nat : nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        COMPARE;    # int : nat : nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        LE;         # bool : nat : nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF
          {
            DROP;       # nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
          }
          {
            SWAP;       # nat : nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            DROP;       # nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
          }; # nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        ADD;        # nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        ADD;        # nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        UPDATE 5;   # @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SOME;       # option (pair nat (pair nat (pair nat timestamp))) : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SWAP;       # address : option (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        UPDATE;     # big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        # self.data.ledger[_x0.address].balance = sp.as_nat(compute_ve_swap_102.value.balance - sp.min(compute_ve_swap_102.value.balance, compute_ve_swap_102.value.release_rate * sp.as_nat(sp.now - compute_ve_swap_102.value.last_claim))) + sp.as_nat(_x0.value - sp.min(_x0.value, (_x0.value // sp.as_nat(compute_ve_swap_104.value - compute_ve_swap_103.value)) * sp.as_nat(sp.now - compute_ve_swap_103.value))) # big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP;        # big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 9;      # pair address nat : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        CAR;        # address : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP;        # address : address : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUG 2;      # address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        GET;        # option (pair nat (pair nat (pair nat timestamp))) : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF_NONE
          {
            PUSH int 119; # int : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            FAILWITH;   # FAILED
          }
          {}; # @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 8;      # timestamp : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        NOW;        # @now : timestamp : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SUB;        # int : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        ISNAT;      # option nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF_NONE
          {
            PUSH int 110; # int : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 9;      # timestamp : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 9;      # timestamp : timestamp : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SUB;        # int : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        ISNAT;      # option nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF_NONE
          {
            PUSH int 107; # int : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 12;     # pair address nat : @some : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        CDR;        # nat : @some : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        EDIV;       # option (pair nat nat) : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF_NONE
          {
            PUSH int 107; # int : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
          }; # nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        MUL;        # nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 11;     # pair address nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        CDR;        # nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP;        # nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 3;      # nat : nat : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        COMPARE;    # int : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        LE;         # bool : nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF
          {
            DROP;       # nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
          }
          {
            SWAP;       # nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            DROP;       # nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
          }; # nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 11;     # pair address nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        CDR;        # nat : nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SUB;        # int : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        ISNAT;      # option nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF_NONE
          {
            PUSH int 119; # int : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 10;     # @some : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        GET 6;      # timestamp : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        NOW;        # @now : timestamp : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SUB;        # int : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        ISNAT;      # option nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF_NONE
          {
            PUSH int 114; # int : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 11;     # @some : @some : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        GET 3;      # nat : @some : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        MUL;        # nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 11;     # @some : nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        CAR;        # nat : nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP;        # nat : nat : nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 3;      # nat : nat : nat : nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        COMPARE;    # int : nat : nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        LE;         # bool : nat : nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF
          {
            DROP;       # nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
          }
          {
            SWAP;       # nat : nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            DROP;       # nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
          }; # nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        DUP 11;     # @some : nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        CAR;        # nat : nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SUB;        # int : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        ISNAT;      # option nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        IF_NONE
          {
            PUSH int 119; # int : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        ADD;        # nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        UPDATE 1;   # @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SOME;       # option (pair nat (pair nat (pair nat timestamp))) : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SWAP;       # address : option (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        UPDATE;     # big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        PAIR;       # pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        SWAP;       # pair timestamp timestamp : pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        PAIR;       # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : pair (pair nat address) (pair address nat) : timestamp : timestamp : @some : pair address nat
        PAIR;       # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : timestamp : timestamp : @some : pair address nat
        # compute_ve_swap_124 = sp.local("compute_ve_swap_124", self.data.ledger[_x0.address]) # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : timestamp : timestamp : @some : pair address nat
        DUP;        # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : timestamp : timestamp : @some : pair address nat
        DUG 5;      # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CAR;        # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        GET 3;      # big_map address (pair nat (pair nat (pair nat timestamp))) : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        DUP 5;      # pair address nat : big_map address (pair nat (pair nat (pair nat timestamp))) : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CAR;        # address : big_map address (pair nat (pair nat (pair nat timestamp))) : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        GET;        # option (pair nat (pair nat (pair nat timestamp))) : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        IF_NONE
          {
            PUSH int 124; # int : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
            FAILWITH;   # FAILED
          }
          {}; # @some : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        # if compute_ve_swap_124.value.balance != 0: # @some : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        DUP;        # @some : @some : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CAR;        # nat : @some : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        PUSH nat 0; # nat : nat : @some : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        COMPARE;    # int : @some : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        NEQ;        # bool : @some : timestamp : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        IF
          {
            DIG 2;      # timestamp : @some : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
            DROP;       # @some : timestamp : @some : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
            DIG 2;      # @some : @some : timestamp : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
            DROP;       # @some : timestamp : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
            # self.data.ledger[_x0.address].release_rate = compute_ve_swap_124.value.balance // sp.as_nat(compute_ve_swap_104.value - sp.now) # @some : timestamp : pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
            DIG 3;      # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : @some : timestamp : pair address nat
            UNPAIR;     # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : pair (pair nat address) (pair address nat) : @some : timestamp : pair address nat
            UNPAIR;     # pair timestamp timestamp : pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair (pair nat address) (pair address nat) : @some : timestamp : pair address nat
            SWAP;       # pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : timestamp : pair address nat
            UNPAIR;     # big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : timestamp : pair address nat
            DUP;        # big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : timestamp : pair address nat
            DUP 8;      # pair address nat : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : timestamp : pair address nat
            CAR;        # address : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : timestamp : pair address nat
            DUP;        # address : address : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : timestamp : pair address nat
            DUG 2;      # address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : timestamp : pair address nat
            GET;        # option (pair nat (pair nat (pair nat timestamp))) : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : timestamp : pair address nat
            IF_NONE
              {
                PUSH int 128; # int : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : timestamp : pair address nat
                FAILWITH;   # FAILED
              }
              {}; # @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : timestamp : pair address nat
            NOW;        # @now : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : timestamp : pair address nat
            DIG 8;      # timestamp : @now : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : pair address nat
            SUB;        # int : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : pair address nat
            ISNAT;      # option nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : pair address nat
            IF_NONE
              {
                PUSH int 128; # int : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : pair address nat
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : @some : pair address nat
            DIG 7;      # @some : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            CAR;        # nat : @some : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            EDIV;       # option (pair nat nat) : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            IF_NONE
              {
                PUSH int 128; # int : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
                FAILWITH;   # FAILED
              }
              {
                CAR;        # nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
              }; # nat : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            UPDATE 3;   # @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            SOME;       # option (pair nat (pair nat (pair nat timestamp))) : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            SWAP;       # address : option (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            UPDATE;     # big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            PAIR;       # pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
            SWAP;       # pair timestamp timestamp : pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair (pair nat address) (pair address nat) : pair address nat
            PAIR;       # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : pair (pair nat address) (pair address nat) : pair address nat
            PAIR;       # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat
            SWAP;       # pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
          }
          {
            DROP 4;     # pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
          }; # pair address nat : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        SWAP;       # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat
        # self.data.ledger[_x0.address].last_claim = sp.now # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair address nat
        UNPAIR;     # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : pair (pair nat address) (pair address nat) : pair address nat
        UNPAIR;     # pair timestamp timestamp : pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair (pair nat address) (pair address nat) : pair address nat
        SWAP;       # pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
        UNPAIR;     # big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
        DUP;        # big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : pair address nat
        DIG 5;      # pair address nat : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat)
        CAR;        # address : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat)
        DUP;        # address : address : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat)
        DUG 2;      # address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat)
        GET;        # option (pair nat (pair nat (pair nat timestamp))) : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat)
        IF_NONE
          {
            PUSH int 131; # int : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat)
            FAILWITH;   # FAILED
          }
          {}; # @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat)
        NOW;        # @now : @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat)
        UPDATE 6;   # @some : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat)
        SOME;       # option (pair nat (pair nat (pair nat timestamp))) : address : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat)
        SWAP;       # address : option (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat)
        UPDATE;     # big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat)
        PAIR;       # pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair timestamp timestamp : pair (pair nat address) (pair address nat)
        SWAP;       # pair timestamp timestamp : pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair (pair nat address) (pair address nat)
        PAIR;       # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : pair (pair nat address) (pair address nat)
        PAIR;       # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        UNIT;       # unit : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        PAIR;       # pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))
      }; # lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
    UNPAIR;     # @parameter : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
    IF_LEFT
      {
        DROP;       # @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        # == claim ==
        # sp.verify(sp.amount == sp.tez(0), 'ENTRYPOINT_DOES_NOT_ACCEPT_TEZ') # @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        PUSH mutez 0; # mutez : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        AMOUNT;     # @amount : mutez : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        COMPARE;    # int : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        EQ;         # bool : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        IF
          {}
          {
            PUSH string "ENTRYPOINT_DOES_NOT_ACCEPT_TEZ"; # string : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            FAILWITH;   # FAILED
          }; # @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        # sp.verify(sp.now >= self.data.genesis, 'SWAP_YET_TO_BEGIN') # @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DUP;        # @storage : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CAR;        # pair (pair (timestamp %end) (timestamp %genesis)) (pair (big_map %ledger address (pair (nat %balance) (pair (nat %release_rate) (pair (nat %vested) (timestamp %last_claim))))) (address %plenty_address)) : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CAR;        # pair (timestamp %end) (timestamp %genesis) : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CDR;        # timestamp : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        NOW;        # @now : timestamp : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        COMPARE;    # int : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        GE;         # bool : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        IF
          {}
          {
            PUSH string "SWAP_YET_TO_BEGIN"; # string : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            FAILWITH;   # FAILED
          }; # @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        # sp.verify(self.data.ledger.contains(sp.sender), 'NOTHING_TO_CLAIM') # @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DUP;        # @storage : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CAR;        # pair (pair (timestamp %end) (timestamp %genesis)) (pair (big_map %ledger address (pair (nat %balance) (pair (nat %release_rate) (pair (nat %vested) (timestamp %last_claim))))) (address %plenty_address)) : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        GET 3;      # big_map address (pair (nat %balance) (pair (nat %release_rate) (pair (nat %vested) (timestamp %last_claim)))) : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        SENDER;     # @sender : big_map address (pair (nat %balance) (pair (nat %release_rate) (pair (nat %vested) (timestamp %last_claim)))) : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        MEM;        # bool : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        IF
          {}
          {
            PUSH string "NOTHING_TO_CLAIM"; # string : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            FAILWITH;   # FAILED
          }; # @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        # sp.verify((sp.now - self.data.ledger[sp.sender].last_claim) > 86400, 'CLAIMING_BEFORE_24_HOURS') # @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DUP;        # @storage : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CAR;        # pair (pair (timestamp %end) (timestamp %genesis)) (pair (big_map %ledger address (pair (nat %balance) (pair (nat %release_rate) (pair (nat %vested) (timestamp %last_claim))))) (address %plenty_address)) : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        GET 3;      # big_map address (pair (nat %balance) (pair (nat %release_rate) (pair (nat %vested) (timestamp %last_claim)))) : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        PUSH int 86400; # int : big_map address (pair (nat %balance) (pair (nat %release_rate) (pair (nat %vested) (timestamp %last_claim)))) : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        SWAP;       # big_map address (pair (nat %balance) (pair (nat %release_rate) (pair (nat %vested) (timestamp %last_claim)))) : int : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        SENDER;     # @sender : big_map address (pair (nat %balance) (pair (nat %release_rate) (pair (nat %vested) (timestamp %last_claim)))) : int : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        GET;        # option (pair (nat %balance) (pair (nat %release_rate) (pair (nat %vested) (timestamp %last_claim)))) : int : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        IF_NONE
          {
            PUSH int 193; # int : int : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            FAILWITH;   # FAILED
          }
          {}; # @some : int : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        GET 6;      # timestamp : int : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        NOW;        # @now : timestamp : int : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        SUB;        # int : int : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        COMPARE;    # int : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        GT;         # bool : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        IF
          {}
          {
            PUSH string "CLAIMING_BEFORE_24_HOURS"; # string : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            FAILWITH;   # FAILED
          }; # @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        SWAP;       # lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : @storage
        # compute_ve_swap_195 = sp.local("compute_ve_swap_195", self.update_ledger(sp.record(address = sp.sender, value = 0))) # lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : @storage
        PUSH nat 0; # nat : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : @storage
        SENDER;     # @sender : nat : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : @storage
        PAIR;       # pair @sender nat : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : @storage
        SWAP;       # lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : pair @sender nat : @storage
        DUG 2;      # pair @sender nat : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        PAIR;       # pair (pair @sender nat) @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        EXEC;       # pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))
        CDR;        # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        # compute_ve_swap_198 = sp.local("compute_ve_swap_198", self.data.ledger[sp.sender]) # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        DUP;        # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CAR;        # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        GET 3;      # big_map address (pair nat (pair nat (pair nat timestamp))) : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        SENDER;     # @sender : big_map address (pair nat (pair nat (pair nat timestamp))) : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        GET;        # option (pair nat (pair nat (pair nat timestamp))) : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        IF_NONE
          {
            PUSH int 198; # int : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
            FAILWITH;   # FAILED
          }
          {}; # @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        # sp.verify(compute_ve_swap_198.value.vested != 0, 'NOTHING_TO_CLAIM') # @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        DUP;        # @some : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        GET 5;      # nat : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        PUSH nat 0; # nat : nat : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        COMPARE;    # int : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        NEQ;        # bool : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        IF
          {}
          {
            PUSH string "NOTHING_TO_CLAIM"; # string : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
            FAILWITH;   # FAILED
          }; # @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        # sp.transfer(sp.record(address = sp.sender, value = compute_ve_swap_198.value.vested), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.ply_address, entry_point='mint').open_some()) # @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        NIL operation; # list operation : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        DUP 3;      # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : list operation : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        GET 3;      # pair nat address : list operation : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CDR;        # address : list operation : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        IF_NONE
          {
            PUSH int 204; # int : list operation : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
            FAILWITH;   # FAILED
          }
          {}; # @some : list operation : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        PUSH mutez 0; # mutez : @some : list operation : @some : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        DIG 3;      # @some : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        GET 5;      # nat : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        SENDER;     # @sender : nat : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        PAIR;       # pair @sender nat : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        TRANSFER_TOKENS; # operation : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        CONS;       # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
        SWAP;       # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : list operation
        # self.data.ledger[sp.sender].vested = 0 # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : list operation
        UNPAIR;     # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : pair (pair nat address) (pair address nat) : list operation
        UNPAIR;     # pair timestamp timestamp : pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair (pair nat address) (pair address nat) : list operation
        SWAP;       # pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        UNPAIR;     # big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        DUP;        # big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        SENDER;     # @sender : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        DUP;        # @sender : @sender : big_map address (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        DUG 2;      # @sender : big_map address (pair nat (pair nat (pair nat timestamp))) : @sender : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        GET;        # option (pair nat (pair nat (pair nat timestamp))) : @sender : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        IF_NONE
          {
            PUSH int 216; # int : @sender : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
            FAILWITH;   # FAILED
          }
          {}; # @some : @sender : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        PUSH nat 0; # nat : @some : @sender : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        UPDATE 5;   # @some : @sender : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        SOME;       # option (pair nat (pair nat (pair nat timestamp))) : @sender : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        SWAP;       # @sender : option (pair nat (pair nat (pair nat timestamp))) : big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        UPDATE;     # big_map address (pair nat (pair nat (pair nat timestamp))) : address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        PAIR;       # pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair timestamp timestamp : pair (pair nat address) (pair address nat) : list operation
        SWAP;       # pair timestamp timestamp : pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address : pair (pair nat address) (pair address nat) : list operation
        PAIR;       # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : pair (pair nat address) (pair address nat) : list operation
        PAIR;       # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : list operation
        SWAP;       # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
      }
      {
        # == exchange ==
        # sp.verify(sp.amount == sp.tez(0), 'ENTRYPOINT_DOES_NOT_ACCEPT_TEZ') # @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        PUSH mutez 0; # mutez : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        AMOUNT;     # @amount : mutez : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        COMPARE;    # int : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        EQ;         # bool : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        IF
          {}
          {
            PUSH string "ENTRYPOINT_DOES_NOT_ACCEPT_TEZ"; # string : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            FAILWITH;   # FAILED
          }; # @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        SWAP;       # @storage : @parameter%exchange : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        # sp.verify(sp.now >= self.data.genesis, 'SWAP_YET_TO_BEGIN') # @storage : @parameter%exchange : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DUP;        # @storage : @storage : @parameter%exchange : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DUG 2;      # @storage : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CAR;        # pair (pair (timestamp %end) (timestamp %genesis)) (pair (big_map %ledger address (pair (nat %balance) (pair (nat %release_rate) (pair (nat %vested) (timestamp %last_claim))))) (address %plenty_address)) : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CAR;        # pair (timestamp %end) (timestamp %genesis) : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CDR;        # timestamp : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        NOW;        # @now : timestamp : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        COMPARE;    # int : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        GE;         # bool : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        IF
          {}
          {
            PUSH string "SWAP_YET_TO_BEGIN"; # string : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            FAILWITH;   # FAILED
          }; # @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        # ply_converted = sp.local("ply_converted", 0)
        # if params.token == 0: # @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DUP;        # @parameter%exchange : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CAR;        # nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        PUSH nat 0; # nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        COMPARE;    # int : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        EQ;         # bool : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        IF
          {
            # ply_converted.value = (self.data.plenty_exchange_val * params.value) // 1000000000000000000 # @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            DUP;        # @parameter%exchange : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            CDR;        # nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            PUSH nat 1000000000000000000; # nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            SWAP;       # nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            DUP 4;      # @storage : nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            GET 3;      # pair (nat %plenty_exchange_val) (address %ply_address) : nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            CAR;        # nat : nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            MUL;        # nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            EDIV;       # option (pair nat nat) : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            IF_NONE
              {
                PUSH int 146; # int : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
                FAILWITH;   # FAILED
              }
              {
                CAR;        # nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
              }; # nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
          }
          {
            # ply_converted.value = (self.data.wrap_exchange_val * params.value) // 1000000000000000000 # @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            DUP;        # @parameter%exchange : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            CDR;        # nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            PUSH nat 1000000000000000000; # nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            SWAP;       # nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            DUP 4;      # @storage : nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            GET 6;      # nat : nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            MUL;        # nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            EDIV;       # option (pair nat nat) : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            IF_NONE
              {
                PUSH int 148; # int : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
                FAILWITH;   # FAILED
              }
              {
                CAR;        # nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
              }; # nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
          }; # nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        # compute_ve_swap_151 = sp.local("compute_ve_swap_151", ply_converted.value // 2) # nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        PUSH nat 2; # nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        SWAP;       # nat : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        EDIV;       # option (pair nat nat) : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        IF_NONE
          {
            PUSH int 151; # int : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
          }; # nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        # sp.transfer(sp.record(address = sp.sender, value = compute_ve_swap_151.value), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.ply_address, entry_point='mint').open_some()) # nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        NIL operation; # list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DUP 4;      # @storage : list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        GET 3;      # pair (nat %plenty_exchange_val) (address %ply_address) : list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CDR;        # address : list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        IF_NONE
          {
            PUSH int 154; # int : list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            FAILWITH;   # FAILED
          }
          {}; # @some : list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DUP 4;      # nat : mutez : @some : list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        SENDER;     # @sender : nat : mutez : @some : list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        PAIR;       # pair @sender nat : mutez : @some : list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        TRANSFER_TOKENS; # operation : list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CONS;       # list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        # compute_ve_swap_161 = sp.local("compute_ve_swap_161", self.update_ledger(sp.record(address = sp.sender, value = compute_ve_swap_151.value))) # list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DUP 5;      # lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : list operation : nat : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DIG 2;      # nat : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : list operation : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        SENDER;     # @sender : nat : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : list operation : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        PAIR;       # pair @sender nat : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : list operation : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        SWAP;       # lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : pair @sender nat : list operation : @parameter%exchange : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DIG 4;      # @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : pair @sender nat : list operation : @parameter%exchange : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DIG 2;      # pair @sender nat : @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : list operation : @parameter%exchange : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        PAIR;       # pair (pair @sender nat) @storage : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : list operation : @parameter%exchange : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        EXEC;       # pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))) : list operation : @parameter%exchange : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CDR;        # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : list operation : @parameter%exchange : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DIG 3;      # lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : list operation : @parameter%exchange
        SWAP;       # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : list operation : @parameter%exchange
        DIG 3;      # @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : list operation
        DIG 3;      # list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        # if params.token == 0: # list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        PUSH nat 0; # nat : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        DUP 3;      # @parameter%exchange : nat : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        CAR;        # nat : nat : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        COMPARE;    # int : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        EQ;         # bool : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
        IF
          {
            # if params.value > 0: # list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            PUSH nat 0; # nat : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            DUP 3;      # @parameter%exchange : nat : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            CDR;        # nat : nat : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            COMPARE;    # int : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            GT;         # bool : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            IF
              {
                DIG 3;      # lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                DROP;       # list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = params.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.plenty_address, entry_point='transfer').open_some()) # list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                DUP 3;      # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                CAR;        # pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address) : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                GET 4;      # address : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                IF_NONE
                  {
                    PUSH int 16; # int : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                DIG 3;      # @parameter%exchange : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                CDR;        # nat : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                SELF_ADDRESS; # @self : nat : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                SENDER;     # @sender : @self : nat : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                PAIR 3;     # pair @sender (pair @self nat) : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                CONS;       # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
              }
              {
                SWAP;       # @parameter%exchange : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
                DROP;       # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
                DIG 2;      # lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                DROP;       # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
              }; # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
          }
          {
            # if params.value > 0: # list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            PUSH nat 0; # nat : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            DUP 3;      # @parameter%exchange : nat : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            CDR;        # nat : nat : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            COMPARE;    # int : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            GT;         # bool : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
            IF
              {
                DIG 3;      # lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                DROP;       # list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                # sp.transfer(sp.list([sp.record(from_ = sp.sender, txs = sp.list([sp.record(to_ = sp.self_address, token_id = 0, amount = params.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.wrap_address, entry_point='transfer').open_some()) # list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                DUP 3;      # pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                GET 5;      # address : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                IF_NONE
                  {
                    PUSH int 55; # int : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%exchange : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                DIG 5;      # @parameter%exchange : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                CDR;        # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                PUSH nat 0; # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                SELF_ADDRESS; # @self : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                PAIR 3;     # pair @self (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                SENDER;     # @sender : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                PAIR;       # pair @sender (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                CONS;       # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
              }
              {
                SWAP;       # @parameter%exchange : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
                DROP;       # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)) : lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))))
                DIG 2;      # lambda (pair (pair address nat) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) (pair unit (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))) : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
                DROP;       # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
              }; # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
          }; # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
      }; # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
    NIL operation; # list operation : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
    SWAP;       # list operation : list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
    ITER
      {
        CONS;       # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
      }; # list operation : pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat))
    PAIR;       # pair (list operation) (pair (pair (pair timestamp timestamp) (pair (big_map address (pair nat (pair nat (pair nat timestamp)))) address)) (pair (pair nat address) (pair address nat)))
  };